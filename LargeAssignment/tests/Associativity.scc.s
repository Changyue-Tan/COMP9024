# **************************** Auto-Generated by scc  *******************************#
#                                                                                    #
# 1. For better understanding of C, recursion, call stack, tree and linked list.     #
#                                                                                    #
# 2. No code optimization.                                                           #
#                                                                                    #
# 3. Three columns in the assembly file: assembly code, IR, and comments             #
#                                                                                    #
#                                                           COMP9024                 #
# ***********************************************************************************#



                                                                        # Data Section
.data
        .input_fmtstr: .string "%ld"
        .output_fmtstr: .string "%ld\012"
                                                                        




# *****************************  main(argc,argv,env)  *****************************
                                                                        # Code Section
.text
.globl main
main:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 120
                                                                        # Number of Parameters/Locals/Temps = 3(6 registers), 1, 8
                                                                        # Frame size = (6 + 1 + 8) * 8 = 120
                                                                        # 16-byte-aligned frame size = 128
        subq $128, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        argc
                                                                        #    -16(%rbp)        argv
                                                                        #    -24(%rbp)        env
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        result
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
        movq %rdx, -24(%rbp)
                                                                        

                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t0
                                                                        # ----------------------------
                                                                        

                                        # t0 = 2 + 3
        movq $2, %rax
        addq $3, %rax
        movq %rax, -64(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t1
                                                                        # ----------------------------
                                                                        

                                        # t1 = t0 + 4
        movq -64(%rbp), %rax
        addq $4, %rax
        movq %rax, -72(%rbp)
                                        # result = t1;
        movq -72(%rbp), %rax
        movq %rax, -56(%rbp)
                                        # output(result);
        leaq .output_fmtstr, %rdi
        movq -56(%rbp), %rsi
        movq $0, %rax
        call printf
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t2
                                                                        # ----------------------------
                                                                        

                                        # t2 = 64 - 4
        movq $64, %rax
        subq $4, %rax
        movq %rax, -80(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t3
                                                                        # ----------------------------
                                                                        

                                        # t3 = t2 - 2
        movq -80(%rbp), %rax
        subq $2, %rax
        movq %rax, -88(%rbp)
                                        # result = t3;
        movq -88(%rbp), %rax
        movq %rax, -56(%rbp)
                                        # output(result);
        leaq .output_fmtstr, %rdi
        movq -56(%rbp), %rsi
        movq $0, %rax
        call printf
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t4
                                                                        # ----------------------------
                                                                        

                                        # t4 = 2 * 3
        movq $2, %rax
        imulq $3, %rax
        movq %rax, -96(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t5
                                                                        # ----------------------------
                                                                        

                                        # t5 = t4 * 4
        movq -96(%rbp), %rax
        imulq $4, %rax
        movq %rax, -104(%rbp)
                                        # result = t5;
        movq -104(%rbp), %rax
        movq %rax, -56(%rbp)
                                        # output(result);
        leaq .output_fmtstr, %rdi
        movq -56(%rbp), %rsi
        movq $0, %rax
        call printf
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t6
                                                                        # ----------------------------
                                                                        

                                        # t6 = 64 / 4
        movq $64, %rax
        cqto
        movq $4, %rdi
        idivq %rdi
        movq %rax, -112(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -120(%rbp)        t7
                                                                        # ----------------------------
                                                                        

                                        # t7 = t6 / 2
        movq -112(%rbp), %rax
        cqto
        movq $2, %rdi
        idivq %rdi
        movq %rax, -120(%rbp)
                                        # result = t7;
        movq -120(%rbp), %rax
        movq %rax, -56(%rbp)
                                        # output(result);
        leaq .output_fmtstr, %rdi
        movq -56(%rbp), %rsi
        movq $0, %rax
        call printf
                                        # return 0;
                                                                        # Save current function's return value 0 in register rax
        movq $0, %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

        

   .section .note.GNU-stack,"",@progbits

