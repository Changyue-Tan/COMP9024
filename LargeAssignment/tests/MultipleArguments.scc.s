# **************************** Auto-Generated by scc  *******************************#
#                                                                                    #
# 1. For better understanding of C, recursion, call stack, tree and linked list.     #
#                                                                                    #
# 2. No code optimization.                                                           #
#                                                                                    #
# 3. Three columns in the assembly file: assembly code, IR, and comments             #
#                                                                                    #
#                                                           COMP9024                 #
# ***********************************************************************************#



                                                                        # Data Section
.data
        .input_fmtstr: .string "%ld"
        .output_fmtstr: .string "%ld\012"
                                                                        




# *****************************  myadd(a1,a2,a3,a4,a5,a6,a7,a8,a9)  *****************************
                                                                        # Code Section
.text
.globl myadd
myadd:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 112
                                                                        # Number of Parameters/Locals/Temps = 9(6 registers), 0, 8
                                                                        # Frame size = (6 + 0 + 8) * 8 = 112
                                                                        # 16-byte-aligned frame size = 112
        subq $112, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        a1
                                                                        #    -16(%rbp)        a2
                                                                        #    -24(%rbp)        a3
                                                                        #    -32(%rbp)        a4
                                                                        #    -40(%rbp)        a5
                                                                        #    -48(%rbp)        a6
                                                                        #     16(%rbp)        a7
                                                                        #     24(%rbp)        a8
                                                                        #     32(%rbp)        a9
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
        movq %rdx, -24(%rbp)
        movq %rcx, -32(%rbp)
        movq %r8, -40(%rbp)
        movq %r9, -48(%rbp)
                                                                        

                                        # output(a1);
        leaq .output_fmtstr, %rdi
        movq -8(%rbp), %rsi
        movq $0, %rax
        call printf
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

                                        # t0 = a1 + a2
        movq -8(%rbp), %rax
        addq -16(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t1
                                                                        # ----------------------------
                                                                        

                                        # t1 = t0 + a3
        movq -56(%rbp), %rax
        addq -24(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t2
                                                                        # ----------------------------
                                                                        

                                        # t2 = t1 + a4
        movq -64(%rbp), %rax
        addq -32(%rbp), %rax
        movq %rax, -72(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t3
                                                                        # ----------------------------
                                                                        

                                        # t3 = t2 + a5
        movq -72(%rbp), %rax
        addq -40(%rbp), %rax
        movq %rax, -80(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t4
                                                                        # ----------------------------
                                                                        

                                        # t4 = t3 + a6
        movq -80(%rbp), %rax
        addq -48(%rbp), %rax
        movq %rax, -88(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t5
                                                                        # ----------------------------
                                                                        

                                        # t5 = t4 + a7
        movq -88(%rbp), %rax
        addq 16(%rbp), %rax
        movq %rax, -96(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t6
                                                                        # ----------------------------
                                                                        

                                        # t6 = t5 + a8
        movq -96(%rbp), %rax
        addq 24(%rbp), %rax
        movq %rax, -104(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t7
                                                                        # ----------------------------
                                                                        

                                        # t7 = t6 + a9
        movq -104(%rbp), %rax
        addq 32(%rbp), %rax
        movq %rax, -112(%rbp)
                                        # return t7;
                                                                        # Save current function's return value t7 in register rax
        movq -112(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  myadd2(a1,a2,a3,a4,a5,a6,a7,a8)  *****************************
                                                                        # Code Section
.text
.globl myadd2
myadd2:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 104
                                                                        # Number of Parameters/Locals/Temps = 8(6 registers), 0, 7
                                                                        # Frame size = (6 + 0 + 7) * 8 = 104
                                                                        # 16-byte-aligned frame size = 112
        subq $112, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        a1
                                                                        #    -16(%rbp)        a2
                                                                        #    -24(%rbp)        a3
                                                                        #    -32(%rbp)        a4
                                                                        #    -40(%rbp)        a5
                                                                        #    -48(%rbp)        a6
                                                                        #     16(%rbp)        a7
                                                                        #     24(%rbp)        a8
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
        movq %rdx, -24(%rbp)
        movq %rcx, -32(%rbp)
        movq %r8, -40(%rbp)
        movq %r9, -48(%rbp)
                                                                        

                                        # output(a1);
        leaq .output_fmtstr, %rdi
        movq -8(%rbp), %rsi
        movq $0, %rax
        call printf
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

                                        # t0 = a1 + a2
        movq -8(%rbp), %rax
        addq -16(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t1
                                                                        # ----------------------------
                                                                        

                                        # t1 = t0 + a3
        movq -56(%rbp), %rax
        addq -24(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t2
                                                                        # ----------------------------
                                                                        

                                        # t2 = t1 + a4
        movq -64(%rbp), %rax
        addq -32(%rbp), %rax
        movq %rax, -72(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t3
                                                                        # ----------------------------
                                                                        

                                        # t3 = t2 + a5
        movq -72(%rbp), %rax
        addq -40(%rbp), %rax
        movq %rax, -80(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t4
                                                                        # ----------------------------
                                                                        

                                        # t4 = t3 + a6
        movq -80(%rbp), %rax
        addq -48(%rbp), %rax
        movq %rax, -88(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t5
                                                                        # ----------------------------
                                                                        

                                        # t5 = t4 + a7
        movq -88(%rbp), %rax
        addq 16(%rbp), %rax
        movq %rax, -96(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t6
                                                                        # ----------------------------
                                                                        

                                        # t6 = t5 + a8
        movq -96(%rbp), %rax
        addq 24(%rbp), %rax
        movq %rax, -104(%rbp)
                                        # return t6;
                                                                        # Save current function's return value t6 in register rax
        movq -104(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  main(argc,argv,env)  *****************************
                                                                        # Code Section
.text
.globl main
main:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 72
                                                                        # Number of Parameters/Locals/Temps = 3(6 registers), 1, 2
                                                                        # Frame size = (6 + 1 + 2) * 8 = 72
                                                                        # 16-byte-aligned frame size = 80
        subq $80, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        argc
                                                                        #    -16(%rbp)        argv
                                                                        #    -24(%rbp)        env
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        x
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
        movq %rdx, -24(%rbp)
                                                                        

                                                                        # Pass an argument: 10
        movq $10, %rdi
                                                                        # Pass an argument: 20
        movq $20, %rsi
                                                                        # Pass an argument: 30
        movq $30, %rdx
                                                                        # Pass an argument: 40
        movq $40, %rcx
                                                                        # Pass an argument: 50
        movq $50, %r8
                                                                        # Pass an argument: 60
        movq $60, %r9
                                                                        # Make the stack pointer rsp 16-byte aligned
        subq $8, %rsp
                                                                        # Push an argument 90 onto the call stack
        pushq $90
                                                                        # Push an argument 80 onto the call stack
        pushq $80
                                                                        # Push an argument 70 onto the call stack
        pushq $70
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = myadd(10,20,30,40,50,60,70,80,90)
        call myadd
                                                                        # Pop the arguments on the call stack
        addq $32, %rsp
                                                                        # Copy the return value from myadd() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -64(%rbp)
                                        # x = t0;
        movq -64(%rbp), %rax
        movq %rax, -56(%rbp)
                                        # output(x);
        leaq .output_fmtstr, %rdi
        movq -56(%rbp), %rsi
        movq $0, %rax
        call printf
                                                                        # Pass an argument: 10
        movq $10, %rdi
                                                                        # Pass an argument: 20
        movq $20, %rsi
                                                                        # Pass an argument: 30
        movq $30, %rdx
                                                                        # Pass an argument: 40
        movq $40, %rcx
                                                                        # Pass an argument: 50
        movq $50, %r8
                                                                        # Pass an argument: 60
        movq $60, %r9
                                                                        # Push an argument 80 onto the call stack
        pushq $80
                                                                        # Push an argument 70 onto the call stack
        pushq $70
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = myadd2(10,20,30,40,50,60,70,80)
        call myadd2
                                                                        # Pop the arguments on the call stack
        addq $16, %rsp
                                                                        # Copy the return value from myadd2() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -72(%rbp)
                                        # x = t1;
        movq -72(%rbp), %rax
        movq %rax, -56(%rbp)
                                        # output(x);
        leaq .output_fmtstr, %rdi
        movq -56(%rbp), %rsi
        movq $0, %rax
        call printf
                                        # return 0;
                                                                        # Save current function's return value 0 in register rax
        movq $0, %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

        

   .section .note.GNU-stack,"",@progbits

