# **************************** Auto-Generated by scc  *******************************#
#                                                                                    #
# 1. For better understanding of C, recursion, call stack, tree and linked list.     #
#                                                                                    #
# 2. No code optimization.                                                           #
#                                                                                    #
# 3. Three columns in the assembly file: assembly code, IR, and comments             #
#                                                                                    #
#                                                           COMP9024                 #
# ***********************************************************************************#



                                                                        # Data Section
.data
        .input_fmtstr: .string "%ld"
        .output_fmtstr: .string "%ld\012"
                                                                        




# *****************************  BinaryTreeSetNodeInfo(root,nodeInfo)  *****************************
                                                                        # Code Section
.text
.globl BinaryTreeSetNodeInfo
BinaryTreeSetNodeInfo:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        #    -16(%rbp)        nodeInfo
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # Pass an argument: nodeInfo
        movq -16(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccWrite64(root,0,nodeInfo)
        call SccWrite64
                                                                        # Copy the return value from SccWrite64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  BinaryTreeGetNodeInfo(root)  *****************************
                                                                        # Code Section
.text
.globl BinaryTreeGetNodeInfo
BinaryTreeGetNodeInfo:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccRead64(root,0)
        call SccRead64
                                                                        # Copy the return value from SccRead64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                        # return t0;
                                                                        # Save current function's return value t0 in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  BinaryTreeSetLeft(root,left)  *****************************
                                                                        # Code Section
.text
.globl BinaryTreeSetLeft
BinaryTreeSetLeft:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        #    -16(%rbp)        left
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 8
        movq $8, %rsi
                                                                        # Pass an argument: left
        movq -16(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccWrite64(root,8,left)
        call SccWrite64
                                                                        # Copy the return value from SccWrite64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  BinaryTreeGetLeft(root)  *****************************
                                                                        # Code Section
.text
.globl BinaryTreeGetLeft
BinaryTreeGetLeft:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 8
        movq $8, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccRead64(root,8)
        call SccRead64
                                                                        # Copy the return value from SccRead64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                        # return t0;
                                                                        # Save current function's return value t0 in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  BinaryTreeSetRight(root,right)  *****************************
                                                                        # Code Section
.text
.globl BinaryTreeSetRight
BinaryTreeSetRight:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        #    -16(%rbp)        right
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 16
        movq $16, %rsi
                                                                        # Pass an argument: right
        movq -16(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccWrite64(root,16,right)
        call SccWrite64
                                                                        # Copy the return value from SccWrite64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  BinaryTreeGetRight(root)  *****************************
                                                                        # Code Section
.text
.globl BinaryTreeGetRight
BinaryTreeGetRight:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 16
        movq $16, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccRead64(root,16)
        call SccRead64
                                                                        # Copy the return value from SccRead64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                        # return t0;
                                                                        # Save current function's return value t0 in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  BinaryTreeSetStatus(root,status)  *****************************
                                                                        # Code Section
.text
.globl BinaryTreeSetStatus
BinaryTreeSetStatus:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        #    -16(%rbp)        status
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 24
        movq $24, %rsi
                                                                        # Pass an argument: status
        movq -16(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccWrite64(root,24,status)
        call SccWrite64
                                                                        # Copy the return value from SccWrite64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  BinaryTreeGetStatus(root)  *****************************
                                                                        # Code Section
.text
.globl BinaryTreeGetStatus
BinaryTreeGetStatus:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 16
        movq $16, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccRead64(root,16)
        call SccRead64
                                                                        # Copy the return value from SccRead64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                        # return t0;
                                                                        # Save current function's return value t0 in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  CreateBinaryTree(nodeInfo,left,right,status)  *****************************
                                                                        # Code Section
.text
.globl CreateBinaryTree
CreateBinaryTree:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 120
                                                                        # Number of Parameters/Locals/Temps = 4(6 registers), 1, 8
                                                                        # Frame size = (6 + 1 + 8) * 8 = 120
                                                                        # 16-byte-aligned frame size = 128
        subq $128, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        nodeInfo
                                                                        #    -16(%rbp)        left
                                                                        #    -24(%rbp)        right
                                                                        #    -32(%rbp)        status
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        node
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
        movq %rdx, -24(%rbp)
        movq %rcx, -32(%rbp)
                                                                        

                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t0
                                                                        # ----------------------------
                                                                        

                                        # t0 = 8 * 4
        movq $8, %rax
        imulq $4, %rax
        movq %rax, -64(%rbp)
                                                                        # Pass an argument: t0
        movq -64(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = SccMalloc(t0)
        call SccMalloc
                                                                        # Copy the return value from SccMalloc() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -72(%rbp)
                                        # node = t1;
        movq -72(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        

                                        # start of if(node) {} else {}
                                        # if(!node) goto Label_0
        cmpq $0, -56(%rbp)
        je Label_0
                                                                        # Pass an argument: node
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: nodeInfo
        movq -8(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = BinaryTreeSetNodeInfo(node,nodeInfo)
        call BinaryTreeSetNodeInfo
                                                                        # Copy the return value from BinaryTreeSetNodeInfo() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                                                        # Pass an argument: node
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: left
        movq -16(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = BinaryTreeSetLeft(node,left)
        call BinaryTreeSetLeft
                                                                        # Copy the return value from BinaryTreeSetLeft() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -88(%rbp)
                                                                        # Pass an argument: node
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: right
        movq -24(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = BinaryTreeSetRight(node,right)
        call BinaryTreeSetRight
                                                                        # Copy the return value from BinaryTreeSetRight() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                                                        # Pass an argument: node
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: status
        movq -32(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t5 = BinaryTreeSetStatus(node,status)
        call BinaryTreeSetStatus
                                                                        # Copy the return value from BinaryTreeSetStatus() to a temporary variable t5
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t5
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
                                        # goto Label_1
        jmp Label_1
                                                                        

                                        # else
Label_0:
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t6
                                                                        # ----------------------------
                                                                        

                                        # t6 = 0 - 1
        movq $0, %rax
        subq $1, %rax
        movq %rax, -112(%rbp)
                                                                        # Pass an argument: t6
        movq -112(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t7 = exit(t6)
        call exit
                                                                        # Copy the return value from exit() to a temporary variable t7
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -120(%rbp)        t7
                                                                        # ----------------------------
                                                                        

        movq %rax, -120(%rbp)
                                        # end of if(node) {} else {}
Label_1:
                                        # return node;
                                                                        # Save current function's return value node in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  ReleaseBinaryTree(root)  *****************************
                                                                        # Code Section
.text
.globl ReleaseBinaryTree
ReleaseBinaryTree:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 104
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 2, 5
                                                                        # Frame size = (6 + 2 + 5) * 8 = 104
                                                                        # 16-byte-aligned frame size = 112
        subq $112, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        left
                                                                        #    -64(%rbp)        right
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        

                                        # start of if(root) {}
                                        # if(!root) goto Label_2
        cmpq $0, -8(%rbp)
        je Label_2
                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = BinaryTreeGetLeft(root)
        call BinaryTreeGetLeft
                                                                        # Copy the return value from BinaryTreeGetLeft() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -72(%rbp)
                                        # left = t0;
        movq -72(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = BinaryTreeGetRight(root)
        call BinaryTreeGetRight
                                                                        # Copy the return value from BinaryTreeGetRight() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                        # right = t1;
        movq -80(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        # Pass an argument: left
        movq -56(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = ReleaseBinaryTree(left)
        call ReleaseBinaryTree
                                                                        # Copy the return value from ReleaseBinaryTree() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -88(%rbp)
                                                                        # Pass an argument: right
        movq -64(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = ReleaseBinaryTree(right)
        call ReleaseBinaryTree
                                                                        # Copy the return value from ReleaseBinaryTree() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = SccFree(root)
        call SccFree
                                                                        # Copy the return value from SccFree() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
                                        # end of if(root) {}
Label_2:
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  VisitBinaryTree(root)  *****************************
                                                                        # Code Section
.text
.globl VisitBinaryTree
VisitBinaryTree:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 112
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 3, 5
                                                                        # Frame size = (6 + 3 + 5) * 8 = 112
                                                                        # 16-byte-aligned frame size = 112
        subq $112, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        root
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        nodeInfo
                                                                        #    -64(%rbp)        left
                                                                        #    -72(%rbp)        right
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        

                                        # start of if(root) {}
                                        # if(!root) goto Label_3
        cmpq $0, -8(%rbp)
        je Label_3
                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = BinaryTreeGetNodeInfo(root)
        call BinaryTreeGetNodeInfo
                                                                        # Copy the return value from BinaryTreeGetNodeInfo() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                        # nodeInfo = t0;
        movq -80(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = BinaryTreeGetLeft(root)
        call BinaryTreeGetLeft
                                                                        # Copy the return value from BinaryTreeGetLeft() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -88(%rbp)
                                        # left = t1;
        movq -88(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        # Pass an argument: root
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = BinaryTreeGetRight(root)
        call BinaryTreeGetRight
                                                                        # Copy the return value from BinaryTreeGetRight() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                        # right = t2;
        movq -96(%rbp), %rax
        movq %rax, -72(%rbp)
                                                                        # Pass an argument: left
        movq -64(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = VisitBinaryTree(left)
        call VisitBinaryTree
                                                                        # Copy the return value from VisitBinaryTree() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
                                        # output(nodeInfo);
        leaq .output_fmtstr, %rdi
        movq -56(%rbp), %rsi
        movq $0, %rax
        call printf
                                                                        # Pass an argument: right
        movq -72(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = VisitBinaryTree(right)
        call VisitBinaryTree
                                                                        # Copy the return value from VisitBinaryTree() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -112(%rbp)
                                        # end of if(root) {}
Label_3:
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  main(argc,argv,env)  *****************************
                                                                        # Code Section
.text
.globl main
main:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 144
                                                                        # Number of Parameters/Locals/Temps = 3(6 registers), 5, 7
                                                                        # Frame size = (6 + 5 + 7) * 8 = 144
                                                                        # 16-byte-aligned frame size = 144
        subq $144, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        argc
                                                                        #    -16(%rbp)        argv
                                                                        #    -24(%rbp)        env
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        leftLeft
                                                                        #    -64(%rbp)        leftRight
                                                                        #    -72(%rbp)        left
                                                                        #    -80(%rbp)        right
                                                                        #    -88(%rbp)        root
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
        movq %rdx, -24(%rbp)
                                                                        

                                                                        # Pass an argument: 97
        movq $97, %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # Pass an argument: 0
        movq $0, %rdx
                                                                        # Pass an argument: 0
        movq $0, %rcx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = CreateBinaryTree(97,0,0,0)
        call CreateBinaryTree
                                                                        # Copy the return value from CreateBinaryTree() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                        # leftLeft = t0;
        movq -96(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        # Pass an argument: 99
        movq $99, %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # Pass an argument: 0
        movq $0, %rdx
                                                                        # Pass an argument: 0
        movq $0, %rcx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = CreateBinaryTree(99,0,0,0)
        call CreateBinaryTree
                                                                        # Copy the return value from CreateBinaryTree() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
                                        # leftRight = t1;
        movq -104(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        # Pass an argument: 98
        movq $98, %rdi
                                                                        # Pass an argument: leftLeft
        movq -56(%rbp), %rsi
                                                                        # Pass an argument: leftRight
        movq -64(%rbp), %rdx
                                                                        # Pass an argument: 0
        movq $0, %rcx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = CreateBinaryTree(98,leftLeft,leftRight,0)
        call CreateBinaryTree
                                                                        # Copy the return value from CreateBinaryTree() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -112(%rbp)
                                        # left = t2;
        movq -112(%rbp), %rax
        movq %rax, -72(%rbp)
                                                                        # Pass an argument: 101
        movq $101, %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # Pass an argument: 0
        movq $0, %rdx
                                                                        # Pass an argument: 0
        movq $0, %rcx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = CreateBinaryTree(101,0,0,0)
        call CreateBinaryTree
                                                                        # Copy the return value from CreateBinaryTree() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -120(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -120(%rbp)
                                        # right = t3;
        movq -120(%rbp), %rax
        movq %rax, -80(%rbp)
                                                                        # Pass an argument: 100
        movq $100, %rdi
                                                                        # Pass an argument: left
        movq -72(%rbp), %rsi
                                                                        # Pass an argument: right
        movq -80(%rbp), %rdx
                                                                        # Pass an argument: 0
        movq $0, %rcx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = CreateBinaryTree(100,left,right,0)
        call CreateBinaryTree
                                                                        # Copy the return value from CreateBinaryTree() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -128(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -128(%rbp)
                                        # root = t4;
        movq -128(%rbp), %rax
        movq %rax, -88(%rbp)
                                                                        # Pass an argument: root
        movq -88(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t5 = VisitBinaryTree(root)
        call VisitBinaryTree
                                                                        # Copy the return value from VisitBinaryTree() to a temporary variable t5
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -136(%rbp)        t5
                                                                        # ----------------------------
                                                                        

        movq %rax, -136(%rbp)
                                                                        # Pass an argument: root
        movq -88(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t6 = ReleaseBinaryTree(root)
        call ReleaseBinaryTree
                                                                        # Copy the return value from ReleaseBinaryTree() to a temporary variable t6
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -144(%rbp)        t6
                                                                        # ----------------------------
                                                                        

        movq %rax, -144(%rbp)
                                        # return 0;
                                                                        # Save current function's return value 0 in register rax
        movq $0, %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

        

   .section .note.GNU-stack,"",@progbits

