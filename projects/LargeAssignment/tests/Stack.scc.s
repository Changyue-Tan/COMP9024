# **************************** Auto-Generated by scc  *******************************#
#                                                                                    #
# 1. For better understanding of C, recursion, call stack, tree and linked list.     #
#                                                                                    #
# 2. No code optimization.                                                           #
#                                                                                    #
# 3. Three columns in the assembly file: assembly code, IR, and comments             #
#                                                                                    #
#                                                           COMP9024                 #
# ***********************************************************************************#



                                                                        # Data Section
.data
        .input_fmtstr: .string "%ld"
        .output_fmtstr: .string "%ld\012"
                                                                        




# *****************************  StackGetSize(pStack)  *****************************
                                                                        # Code Section
.text
.globl StackGetSize
StackGetSize:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccRead64(pStack,0)
        call SccRead64
                                                                        # Copy the return value from SccRead64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                        # return t0;
                                                                        # Save current function's return value t0 in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackSetSize(pStack,size)  *****************************
                                                                        # Code Section
.text
.globl StackSetSize
StackSetSize:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        #    -16(%rbp)        size
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # Pass an argument: size
        movq -16(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccWrite64(pStack,0,size)
        call SccWrite64
                                                                        # Copy the return value from SccWrite64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackGetTop(pStack)  *****************************
                                                                        # Code Section
.text
.globl StackGetTop
StackGetTop:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 8
        movq $8, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccRead64(pStack,8)
        call SccRead64
                                                                        # Copy the return value from SccRead64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                        # return t0;
                                                                        # Save current function's return value t0 in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackSetTop(pStack,top)  *****************************
                                                                        # Code Section
.text
.globl StackSetTop
StackSetTop:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        #    -16(%rbp)        top
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 8
        movq $8, %rsi
                                                                        # Pass an argument: top
        movq -16(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccWrite64(pStack,8,top)
        call SccWrite64
                                                                        # Copy the return value from SccWrite64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackGetItems(pStack)  *****************************
                                                                        # Code Section
.text
.globl StackGetItems
StackGetItems:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 16
        movq $16, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccRead64(pStack,16)
        call SccRead64
                                                                        # Copy the return value from SccRead64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                        # return t0;
                                                                        # Save current function's return value t0 in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackSetItems(pStack,pItems)  *****************************
                                                                        # Code Section
.text
.globl StackSetItems
StackSetItems:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 56
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 0, 1
                                                                        # Frame size = (6 + 0 + 1) * 8 = 56
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        #    -16(%rbp)        pItems
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 16
        movq $16, %rsi
                                                                        # Pass an argument: pItems
        movq -16(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccWrite64(pStack,16,pItems)
        call SccWrite64
                                                                        # Copy the return value from SccWrite64() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  ReleaseStack(pStack)  *****************************
                                                                        # Code Section
.text
.globl ReleaseStack
ReleaseStack:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 80
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 1, 3
                                                                        # Frame size = (6 + 1 + 3) * 8 = 80
                                                                        # 16-byte-aligned frame size = 80
        subq $80, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        pItems
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = StackGetItems(pStack)
        call StackGetItems
                                                                        # Copy the return value from StackGetItems() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -64(%rbp)
                                        # pItems = t0;
        movq -64(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        # Pass an argument: pItems
        movq -56(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = SccFree(pItems)
        call SccFree
                                                                        # Copy the return value from SccFree() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -72(%rbp)
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = SccFree(pStack)
        call SccFree
                                                                        # Copy the return value from SccFree() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  CreateStack()  *****************************
                                                                        # Code Section
.text
.globl CreateStack
CreateStack:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 144
                                                                        # Number of Parameters/Locals/Temps = 0(6 registers), 4, 8
                                                                        # Frame size = (6 + 4 + 8) * 8 = 144
                                                                        # 16-byte-aligned frame size = 144
        subq $144, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        pStack
                                                                        #    -64(%rbp)        pItems
                                                                        #    -72(%rbp)        size
                                                                        #    -80(%rbp)        top
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
                                                                        

                                        # size = 2;
        movq $2, %rax
        movq %rax, -72(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t0
                                                                        # ----------------------------
                                                                        

                                        # t0 = 0 - 1
        movq $0, %rax
        subq $1, %rax
        movq %rax, -88(%rbp)
                                        # top = t0;
        movq -88(%rbp), %rax
        movq %rax, -80(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t1
                                                                        # ----------------------------
                                                                        

                                        # t1 = 8 * 3
        movq $8, %rax
        imulq $3, %rax
        movq %rax, -96(%rbp)
                                                                        # Pass an argument: t1
        movq -96(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = SccMalloc(t1)
        call SccMalloc
                                                                        # Copy the return value from SccMalloc() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
                                        # pStack = t2;
        movq -104(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t3
                                                                        # ----------------------------
                                                                        

                                        # t3 = size * 8
        movq -72(%rbp), %rax
        imulq $8, %rax
        movq %rax, -112(%rbp)
                                                                        # Pass an argument: t3
        movq -112(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = SccMalloc(t3)
        call SccMalloc
                                                                        # Copy the return value from SccMalloc() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -120(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -120(%rbp)
                                        # pItems = t4;
        movq -120(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        # Pass an argument: pStack
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: size
        movq -72(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t5 = StackSetSize(pStack,size)
        call StackSetSize
                                                                        # Copy the return value from StackSetSize() to a temporary variable t5
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -128(%rbp)        t5
                                                                        # ----------------------------
                                                                        

        movq %rax, -128(%rbp)
                                                                        # Pass an argument: pStack
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: top
        movq -80(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t6 = StackSetTop(pStack,top)
        call StackSetTop
                                                                        # Copy the return value from StackSetTop() to a temporary variable t6
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -136(%rbp)        t6
                                                                        # ----------------------------
                                                                        

        movq %rax, -136(%rbp)
                                                                        # Pass an argument: pStack
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: pItems
        movq -64(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t7 = StackSetItems(pStack,pItems)
        call StackSetItems
                                                                        # Copy the return value from StackSetItems() to a temporary variable t7
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -144(%rbp)        t7
                                                                        # ----------------------------
                                                                        

        movq %rax, -144(%rbp)
                                        # return pStack;
                                                                        # Save current function's return value pStack in register rax
        movq -56(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackIsEmpty(pStack)  *****************************
                                                                        # Code Section
.text
.globl StackIsEmpty
StackIsEmpty:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 80
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 1, 3
                                                                        # Frame size = (6 + 1 + 3) * 8 = 80
                                                                        # 16-byte-aligned frame size = 80
        subq $80, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        top
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = StackGetTop(pStack)
        call StackGetTop
                                                                        # Copy the return value from StackGetTop() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -64(%rbp)
                                        # top = t0;
        movq -64(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t1
                                                                        # ----------------------------
                                                                        

                                        # t1 = 0 - 1
        movq $0, %rax
        subq $1, %rax
        movq %rax, -72(%rbp)
                                                                        # Pass an argument: top
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: t1
        movq -72(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = SccEqual(top,t1)
        call SccEqual
                                                                        # Copy the return value from SccEqual() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                        # return t2;
                                                                        # Save current function's return value t2 in register rax
        movq -80(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackIsFull(pStack)  *****************************
                                                                        # Code Section
.text
.globl StackIsFull
StackIsFull:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 96
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 2, 4
                                                                        # Frame size = (6 + 2 + 4) * 8 = 96
                                                                        # 16-byte-aligned frame size = 96
        subq $96, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        size
                                                                        #    -64(%rbp)        top
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = StackGetTop(pStack)
        call StackGetTop
                                                                        # Copy the return value from StackGetTop() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -72(%rbp)
                                        # top = t0;
        movq -72(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = StackGetSize(pStack)
        call StackGetSize
                                                                        # Copy the return value from StackGetSize() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                        # size = t1;
        movq -80(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t2
                                                                        # ----------------------------
                                                                        

                                        # t2 = size - 1
        movq -56(%rbp), %rax
        subq $1, %rax
        movq %rax, -88(%rbp)
                                                                        # Pass an argument: top
        movq -64(%rbp), %rdi
                                                                        # Pass an argument: t2
        movq -88(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = SccEqual(top,t2)
        call SccEqual
                                                                        # Copy the return value from SccEqual() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                        # return t3;
                                                                        # Save current function's return value t3 in register rax
        movq -96(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackPush(pStack,item)  *****************************
                                                                        # Code Section
.text
.globl StackPush
StackPush:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 224
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 4, 18
                                                                        # Frame size = (6 + 4 + 18) * 8 = 224
                                                                        # 16-byte-aligned frame size = 224
        subq $224, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        #    -16(%rbp)        item
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        top
                                                                        #    -64(%rbp)        items
                                                                        #    -72(%rbp)        size
                                                                        #    -80(%rbp)        newItems
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = StackGetTop(pStack)
        call StackGetTop
                                                                        # Copy the return value from StackGetTop() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -88(%rbp)
                                        # top = t0;
        movq -88(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        

                                        # start of if(t1) {}
                                        # if(!t1) goto Label_0
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = StackIsFull(pStack)
        call StackIsFull
                                                                        # Copy the return value from StackIsFull() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
        cmpq $0, -96(%rbp)
        je Label_0
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = StackGetSize(pStack)
        call StackGetSize
                                                                        # Copy the return value from StackGetSize() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
                                        # size = t2;
        movq -104(%rbp), %rax
        movq %rax, -72(%rbp)
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = StackGetItems(pStack)
        call StackGetItems
                                                                        # Copy the return value from StackGetItems() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -112(%rbp)
                                        # items = t3;
        movq -112(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -120(%rbp)        t4
                                                                        # ----------------------------
                                                                        

                                        # t4 = size * 2
        movq -72(%rbp), %rax
        imulq $2, %rax
        movq %rax, -120(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -128(%rbp)        t5
                                                                        # ----------------------------
                                                                        

                                        # t5 = t4 * 8
        movq -120(%rbp), %rax
        imulq $8, %rax
        movq %rax, -128(%rbp)
                                                                        # Pass an argument: t5
        movq -128(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t6 = SccMalloc(t5)
        call SccMalloc
                                                                        # Copy the return value from SccMalloc() to a temporary variable t6
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -136(%rbp)        t6
                                                                        # ----------------------------
                                                                        

        movq %rax, -136(%rbp)
                                        # newItems = t6;
        movq -136(%rbp), %rax
        movq %rax, -80(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -144(%rbp)        t7
                                                                        # ----------------------------
                                                                        

                                        # t7 = size * 8
        movq -72(%rbp), %rax
        imulq $8, %rax
        movq %rax, -144(%rbp)
                                                                        # Pass an argument: newItems
        movq -80(%rbp), %rdi
                                                                        # Pass an argument: items
        movq -64(%rbp), %rsi
                                                                        # Pass an argument: t7
        movq -144(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t8 = memcpy(newItems,items,t7)
        call memcpy
                                                                        # Copy the return value from memcpy() to a temporary variable t8
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -152(%rbp)        t8
                                                                        # ----------------------------
                                                                        

        movq %rax, -152(%rbp)
                                                                        # Pass an argument: items
        movq -64(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t9 = SccFree(items)
        call SccFree
                                                                        # Copy the return value from SccFree() to a temporary variable t9
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -160(%rbp)        t9
                                                                        # ----------------------------
                                                                        

        movq %rax, -160(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -168(%rbp)        t10
                                                                        # ----------------------------
                                                                        

                                        # t10 = size * 2
        movq -72(%rbp), %rax
        imulq $2, %rax
        movq %rax, -168(%rbp)
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: t10
        movq -168(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t11 = StackSetSize(pStack,t10)
        call StackSetSize
                                                                        # Copy the return value from StackSetSize() to a temporary variable t11
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -176(%rbp)        t11
                                                                        # ----------------------------
                                                                        

        movq %rax, -176(%rbp)
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: newItems
        movq -80(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t12 = StackSetItems(pStack,newItems)
        call StackSetItems
                                                                        # Copy the return value from StackSetItems() to a temporary variable t12
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -184(%rbp)        t12
                                                                        # ----------------------------
                                                                        

        movq %rax, -184(%rbp)
                                        # items = newItems;
        movq -80(%rbp), %rax
        movq %rax, -64(%rbp)
                                        # end of if(t1) {}
Label_0:
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -192(%rbp)        t13
                                                                        # ----------------------------
                                                                        

                                        # t13 = top + 1
        movq -56(%rbp), %rax
        addq $1, %rax
        movq %rax, -192(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -200(%rbp)        t14
                                                                        # ----------------------------
                                                                        

                                        # t14 = t13 * 8
        movq -192(%rbp), %rax
        imulq $8, %rax
        movq %rax, -200(%rbp)
                                                                        # Pass an argument: items
        movq -64(%rbp), %rdi
                                                                        # Pass an argument: t14
        movq -200(%rbp), %rsi
                                                                        # Pass an argument: item
        movq -16(%rbp), %rdx
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t15 = SccWrite64(items,t14,item)
        call SccWrite64
                                                                        # Copy the return value from SccWrite64() to a temporary variable t15
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -208(%rbp)        t15
                                                                        # ----------------------------
                                                                        

        movq %rax, -208(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -216(%rbp)        t16
                                                                        # ----------------------------
                                                                        

                                        # t16 = top + 1
        movq -56(%rbp), %rax
        addq $1, %rax
        movq %rax, -216(%rbp)
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: t16
        movq -216(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t17 = StackSetTop(pStack,t16)
        call StackSetTop
                                                                        # Copy the return value from StackSetTop() to a temporary variable t17
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -224(%rbp)        t17
                                                                        # ----------------------------
                                                                        

        movq %rax, -224(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  StackPop(pStack)  *****************************
                                                                        # Code Section
.text
.globl StackPop
StackPop:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 144
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 3, 9
                                                                        # Frame size = (6 + 3 + 9) * 8 = 144
                                                                        # 16-byte-aligned frame size = 144
        subq $144, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        pStack
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        top
                                                                        #    -64(%rbp)        items
                                                                        #    -72(%rbp)        x
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        

                                        # start of if(t0) {}
                                        # if(!t0) goto Label_1
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = StackIsEmpty(pStack)
        call StackIsEmpty
                                                                        # Copy the return value from StackIsEmpty() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
        cmpq $0, -80(%rbp)
        je Label_1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t1
                                                                        # ----------------------------
                                                                        

                                        # t1 = 0 - 1
        movq $0, %rax
        subq $1, %rax
        movq %rax, -88(%rbp)
                                                                        # Pass an argument: t1
        movq -88(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = exit(t1)
        call exit
                                                                        # Copy the return value from exit() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                        # end of if(t0) {}
Label_1:
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = StackGetTop(pStack)
        call StackGetTop
                                                                        # Copy the return value from StackGetTop() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
                                        # top = t3;
        movq -104(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = StackGetItems(pStack)
        call StackGetItems
                                                                        # Copy the return value from StackGetItems() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -112(%rbp)
                                        # items = t4;
        movq -112(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -120(%rbp)        t5
                                                                        # ----------------------------
                                                                        

                                        # t5 = 8 * top
        movq $8, %rax
        imulq -56(%rbp), %rax
        movq %rax, -120(%rbp)
                                                                        # Pass an argument: items
        movq -64(%rbp), %rdi
                                                                        # Pass an argument: t5
        movq -120(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t6 = SccRead64(items,t5)
        call SccRead64
                                                                        # Copy the return value from SccRead64() to a temporary variable t6
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -128(%rbp)        t6
                                                                        # ----------------------------
                                                                        

        movq %rax, -128(%rbp)
                                        # x = t6;
        movq -128(%rbp), %rax
        movq %rax, -72(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -136(%rbp)        t7
                                                                        # ----------------------------
                                                                        

                                        # t7 = top - 1
        movq -56(%rbp), %rax
        subq $1, %rax
        movq %rax, -136(%rbp)
                                                                        # Pass an argument: pStack
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: t7
        movq -136(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t8 = StackSetTop(pStack,t7)
        call StackSetTop
                                                                        # Copy the return value from StackSetTop() to a temporary variable t8
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -144(%rbp)        t8
                                                                        # ----------------------------
                                                                        

        movq %rax, -144(%rbp)
                                        # return x;
                                                                        # Save current function's return value x in register rax
        movq -72(%rbp), %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  PrintPrefix(base)  *****************************
                                                                        # Code Section
.text
.globl PrintPrefix
PrintPrefix:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 112
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 8
                                                                        # Frame size = (6 + 0 + 8) * 8 = 112
                                                                        # 16-byte-aligned frame size = 112
        subq $112, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        base
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        

                                        # start of if(t0) {}
                                        # if(!t0) goto Label_7
                                                                        # Pass an argument: base
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 10
        movq $10, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccNotEqual(base,10)
        call SccNotEqual
                                                                        # Copy the return value from SccNotEqual() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
        cmpq $0, -56(%rbp)
        je Label_7
                                                                        # Pass an argument: 48
        movq $48, %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = putchar(48)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -64(%rbp)
                                                                        # Pass an argument: base
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 2
        movq $2, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = SccEqual(base,2)
        call SccEqual
                                                                        # Copy the return value from SccEqual() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -72(%rbp)
                                                                        

                                        # start of if(t2) {} else {}
                                        # if(!t2) goto Label_2
        cmpq $0, -72(%rbp)
        je Label_2
                                                                        # Pass an argument: 98
        movq $98, %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = putchar(98)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                        # goto Label_6
        jmp Label_6
                                                                        

                                        # else
Label_2:
                                                                        # Pass an argument: base
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 8
        movq $8, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = SccEqual(base,8)
        call SccEqual
                                                                        # Copy the return value from SccEqual() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -88(%rbp)
                                                                        

                                        # start of if(t4) {} else {}
                                        # if(!t4) goto Label_3
        cmpq $0, -88(%rbp)
        je Label_3
                                                                        # Pass an argument: 111
        movq $111, %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t5 = putchar(111)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t5
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t5
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                        # goto Label_5
        jmp Label_5
                                                                        

                                        # else
Label_3:
                                                                        

                                        # start of if(t6) {}
                                        # if(!t6) goto Label_4
                                                                        # Pass an argument: base
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 16
        movq $16, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t6 = SccEqual(base,16)
        call SccEqual
                                                                        # Copy the return value from SccEqual() to a temporary variable t6
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t6
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
        cmpq $0, -104(%rbp)
        je Label_4
                                                                        # Pass an argument: 120
        movq $120, %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t7 = putchar(120)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t7
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t7
                                                                        # ----------------------------
                                                                        

        movq %rax, -112(%rbp)
                                        # end of if(t6) {}
Label_4:
                                        # end of if(t4) {} else {}
Label_5:
                                        # end of if(t2) {} else {}
Label_6:
                                        # end of if(t0) {}
Label_7:
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  GetAbsoluteValue(x)  *****************************
                                                                        # Code Section
.text
.globl GetAbsoluteValue
GetAbsoluteValue:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 64
                                                                        # Number of Parameters/Locals/Temps = 1(6 registers), 0, 2
                                                                        # Frame size = (6 + 0 + 2) * 8 = 64
                                                                        # 16-byte-aligned frame size = 64
        subq $64, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        x
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
                                                                        

                                                                        # Pass an argument: x
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = SccLess(x,0)
        call SccLess
                                                                        # Copy the return value from SccLess() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -56(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -56(%rbp)
                                                                        

                                        # start of if(t0) {} else {}
                                        # if(!t0) goto Label_8
        cmpq $0, -56(%rbp)
        je Label_8
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t1
                                                                        # ----------------------------
                                                                        

                                        # t1 = 0 - x
        movq $0, %rax
        subq -8(%rbp), %rax
        movq %rax, -64(%rbp)
                                        # return t1;
                                                                        # Save current function's return value t1 in register rax
        movq -64(%rbp), %rax
                                        # goto Label_9
        jmp Label_9
                                                                        

                                        # else
Label_8:
                                        # return x;
                                                                        # Save current function's return value x in register rax
        movq -8(%rbp), %rax
                                        # end of if(t0) {} else {}
Label_9:
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  PrintInteger(x,base)  *****************************
                                                                        # Code Section
.text
.globl PrintInteger
PrintInteger:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 224
                                                                        # Number of Parameters/Locals/Temps = 2(6 registers), 2, 20
                                                                        # Frame size = (6 + 2 + 20) * 8 = 224
                                                                        # 16-byte-aligned frame size = 224
        subq $224, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        x
                                                                        #    -16(%rbp)        base
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        pStack
                                                                        #    -64(%rbp)        r
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
                                                                        

                                                                        # Pass an argument: x
        movq -8(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = GetAbsoluteValue(x)
        call GetAbsoluteValue
                                                                        # Copy the return value from GetAbsoluteValue() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -72(%rbp)
                                        # x = t0;
        movq -72(%rbp), %rax
        movq %rax, -8(%rbp)
                                                                        # Pass an argument: base
        movq -16(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = GetAbsoluteValue(base)
        call GetAbsoluteValue
                                                                        # Copy the return value from GetAbsoluteValue() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                        # base = t1;
        movq -80(%rbp), %rax
        movq %rax, -16(%rbp)
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = CreateStack()
        call CreateStack
                                                                        # Copy the return value from CreateStack() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -88(%rbp)
                                        # pStack = t2;
        movq -88(%rbp), %rax
        movq %rax, -56(%rbp)
                                                                        

                                        # start of while (t3) {}
Label_10:
                                                                        # Pass an argument: x
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: 0
        movq $0, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = SccNotEqual(x,0)
        call SccNotEqual
                                                                        # Copy the return value from SccNotEqual() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                        # if(!t3) goto Label_11
        cmpq $0, -96(%rbp)
        je Label_11
                                                                        

                                                                        # Pass an argument: x
        movq -8(%rbp), %rdi
                                                                        # Pass an argument: base
        movq -16(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = SccMod(x,base)
        call SccMod
                                                                        # Copy the return value from SccMod() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -104(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -104(%rbp)
                                        # r = t4;
        movq -104(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -112(%rbp)        t5
                                                                        # ----------------------------
                                                                        

                                        # t5 = x / base
        movq -8(%rbp), %rax
        cqto
        movq -16(%rbp), %rdi
        idivq %rdi
        movq %rax, -112(%rbp)
                                        # x = t5;
        movq -112(%rbp), %rax
        movq %rax, -8(%rbp)
                                                                        # Pass an argument: pStack
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: r
        movq -64(%rbp), %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t6 = StackPush(pStack,r)
        call StackPush
                                                                        # Copy the return value from StackPush() to a temporary variable t6
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -120(%rbp)        t6
                                                                        # ----------------------------
                                                                        

        movq %rax, -120(%rbp)
                                                                        

                                        # goto Label_10
        jmp Label_10
                                                                        

                                        # end of while(t3) do {}
Label_11:
                                                                        # Pass an argument: base
        movq -16(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t7 = PrintPrefix(base)
        call PrintPrefix
                                                                        # Copy the return value from PrintPrefix() to a temporary variable t7
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -128(%rbp)        t7
                                                                        # ----------------------------
                                                                        

        movq %rax, -128(%rbp)
                                                                        

                                        # start of while (t9) {}
Label_12:
                                                                        # Pass an argument: pStack
        movq -56(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t8 = StackIsEmpty(pStack)
        call StackIsEmpty
                                                                        # Copy the return value from StackIsEmpty() to a temporary variable t8
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -136(%rbp)        t8
                                                                        # ----------------------------
                                                                        

        movq %rax, -136(%rbp)
                                                                        # Pass an argument: t8
        movq -136(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t9 = SccLogicNot(t8)
        call SccLogicNot
                                                                        # Copy the return value from SccLogicNot() to a temporary variable t9
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -144(%rbp)        t9
                                                                        # ----------------------------
                                                                        

        movq %rax, -144(%rbp)
                                        # if(!t9) goto Label_17
        cmpq $0, -144(%rbp)
        je Label_17
                                                                        

                                                                        # Pass an argument: pStack
        movq -56(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t10 = StackPop(pStack)
        call StackPop
                                                                        # Copy the return value from StackPop() to a temporary variable t10
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -152(%rbp)        t10
                                                                        # ----------------------------
                                                                        

        movq %rax, -152(%rbp)
                                        # r = t10;
        movq -152(%rbp), %rax
        movq %rax, -64(%rbp)
                                                                        # Pass an argument: r
        movq -64(%rbp), %rdi
                                                                        # Pass an argument: 9
        movq $9, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t11 = SccLessEqual(r,9)
        call SccLessEqual
                                                                        # Copy the return value from SccLessEqual() to a temporary variable t11
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -160(%rbp)        t11
                                                                        # ----------------------------
                                                                        

        movq %rax, -160(%rbp)
                                                                        

                                        # start of if(t11) {} else {}
                                        # if(!t11) goto Label_13
        cmpq $0, -160(%rbp)
        je Label_13
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -168(%rbp)        t12
                                                                        # ----------------------------
                                                                        

                                        # t12 = r + 48
        movq -64(%rbp), %rax
        addq $48, %rax
        movq %rax, -168(%rbp)
                                                                        # Pass an argument: t12
        movq -168(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t13 = putchar(t12)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t13
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -176(%rbp)        t13
                                                                        # ----------------------------
                                                                        

        movq %rax, -176(%rbp)
                                        # goto Label_16
        jmp Label_16
                                                                        

                                        # else
Label_13:
                                                                        # Pass an argument: r
        movq -64(%rbp), %rdi
                                                                        # Pass an argument: 15
        movq $15, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t14 = SccLessEqual(r,15)
        call SccLessEqual
                                                                        # Copy the return value from SccLessEqual() to a temporary variable t14
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -184(%rbp)        t14
                                                                        # ----------------------------
                                                                        

        movq %rax, -184(%rbp)
                                                                        

                                        # start of if(t14) {} else {}
                                        # if(!t14) goto Label_14
        cmpq $0, -184(%rbp)
        je Label_14
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -192(%rbp)        t15
                                                                        # ----------------------------
                                                                        

                                        # t15 = r + 55
        movq -64(%rbp), %rax
        addq $55, %rax
        movq %rax, -192(%rbp)
                                                                        # Pass an argument: t15
        movq -192(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t16 = putchar(t15)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t16
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -200(%rbp)        t16
                                                                        # ----------------------------
                                                                        

        movq %rax, -200(%rbp)
                                        # goto Label_15
        jmp Label_15
                                                                        

                                        # else
Label_14:
                                                                        # Pass an argument: 63
        movq $63, %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t17 = putchar(63)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t17
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -208(%rbp)        t17
                                                                        # ----------------------------
                                                                        

        movq %rax, -208(%rbp)
                                        # end of if(t14) {} else {}
Label_15:
                                        # end of if(t11) {} else {}
Label_16:
                                                                        

                                        # goto Label_12
        jmp Label_12
                                                                        

                                        # end of while(t9) do {}
Label_17:
                                                                        # Pass an argument: pStack
        movq -56(%rbp), %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t18 = ReleaseStack(pStack)
        call ReleaseStack
                                                                        # Copy the return value from ReleaseStack() to a temporary variable t18
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -216(%rbp)        t18
                                                                        # ----------------------------
                                                                        

        movq %rax, -216(%rbp)
                                                                        # Pass an argument: 10
        movq $10, %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t19 = putchar(10)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t19
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #   -224(%rbp)        t19
                                                                        # ----------------------------
                                                                        

        movq %rax, -224(%rbp)
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

                                                                        




# *****************************  main(argc,argv,env)  *****************************
                                                                        # Code Section
.text
.globl main
main:
                                                                        # Function Prologue
        pushq %rbp
        movq %rsp, %rbp
                                                                        # Frame size = 96
                                                                        # Number of Parameters/Locals/Temps = 3(6 registers), 1, 5
                                                                        # Frame size = (6 + 1 + 5) * 8 = 96
                                                                        # 16-byte-aligned frame size = 96
        subq $96, %rsp
                                                                        

                                                                        

                                                                        # Table of Function Parameters
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #     -8(%rbp)        argc
                                                                        #    -16(%rbp)        argv
                                                                        #    -24(%rbp)        env
                                                                        # ----------------------------
                                                                        

                                                                        # Table of Local Variables
                                                                        # ----------------------------
                                                                        #   AccessName        Name
                                                                        # ----------------------------
                                                                        #
                                                                        #    -56(%rbp)        x
                                                                        # ----------------------------
                                                                        

                                                                        # Simple policy for saving arguments passed in registers
        movq %rdi, -8(%rbp)
        movq %rsi, -16(%rbp)
        movq %rdx, -24(%rbp)
                                                                        

                                        # x = 20249024;
        movq $20249024, %rax
        movq %rax, -56(%rbp)
                                        # output(x);
        leaq .output_fmtstr, %rdi
        movq -56(%rbp), %rsi
        movq $0, %rax
        call printf
                                                                        # Pass an argument: 10
        movq $10, %rdi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t0 = putchar(10)
        call putchar
                                                                        # Copy the return value from putchar() to a temporary variable t0
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -64(%rbp)        t0
                                                                        # ----------------------------
                                                                        

        movq %rax, -64(%rbp)
                                                                        # Pass an argument: x
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: 16
        movq $16, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t1 = PrintInteger(x,16)
        call PrintInteger
                                                                        # Copy the return value from PrintInteger() to a temporary variable t1
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -72(%rbp)        t1
                                                                        # ----------------------------
                                                                        

        movq %rax, -72(%rbp)
                                                                        # Pass an argument: x
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: 10
        movq $10, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t2 = PrintInteger(x,10)
        call PrintInteger
                                                                        # Copy the return value from PrintInteger() to a temporary variable t2
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -80(%rbp)        t2
                                                                        # ----------------------------
                                                                        

        movq %rax, -80(%rbp)
                                                                        # Pass an argument: x
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: 8
        movq $8, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t3 = PrintInteger(x,8)
        call PrintInteger
                                                                        # Copy the return value from PrintInteger() to a temporary variable t3
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -88(%rbp)        t3
                                                                        # ----------------------------
                                                                        

        movq %rax, -88(%rbp)
                                                                        # Pass an argument: x
        movq -56(%rbp), %rdi
                                                                        # Pass an argument: 2
        movq $2, %rsi
                                                                        # No floating-point numbers when calling a variadic function
        movq $0, %rax
                                        # t4 = PrintInteger(x,2)
        call PrintInteger
                                                                        # Copy the return value from PrintInteger() to a temporary variable t4
                                                                        

                                                                        # ----------------------------
                                                                        #   AccessName        Temp Var
                                                                        # ----------------------------
                                                                        #    -96(%rbp)        t4
                                                                        # ----------------------------
                                                                        

        movq %rax, -96(%rbp)
                                        # return 0;
                                                                        # Save current function's return value 0 in register rax
        movq $0, %rax
                                                                        # Function Epilogue
        movq %rbp, %rsp
        popq %rbp
        ret
                                                                        

        

   .section .note.GNU-stack,"",@progbits

